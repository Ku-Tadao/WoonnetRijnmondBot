name: Build and Release Executable

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # NEW: Download the latest stable chromedriver for Windows
      - name: Download Chromedriver
        run: |
          # Fetch the latest stable chromedriver version and URL from the new JSON endpoints
          $LATEST_URL = "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
          $Response = Invoke-RestMethod -Uri $LATEST_URL
          $ChromedriverUrl = $Response.channels.Stable.downloads.chromedriver | Where-Object { $_.platform -eq 'win64' } | Select-Object -ExpandProperty url
          
          # Download and unzip
          Invoke-WebRequest -Uri $ChromedriverUrl -OutFile chromedriver.zip
          Expand-Archive -Path chromedriver.zip -DestinationPath .
          
          # Move chromedriver.exe to the root directory where the .spec file expects it
          Move-Item -Path "chromedriver-win64/chromedriver.exe" -Destination "chromedriver.exe" -Force

      # Build one-file EXE and bundle chromedriver.exe into sys._MEIPASS
      - name: Build the executable (one-file)
        run: pyinstaller -F main.py -n WoonnetRijnmondBot --add-binary "chromedriver.exe;." --icon assets/icon.ico

      # Optional VirusTotal scan (requires VIRUSTOTAL_API_KEY secret)
      - name: VirusTotal Scan
        id: vt_scan
        shell: pwsh
        env:
          VT_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
        run: |
          if (-not $Env:VT_API_KEY) { Write-Host 'No VirusTotal API key provided. Skipping scan.'; exit 0 }
          $ErrorActionPreference = 'Stop'
          $exePath = "dist/WoonnetRijnmondBot.exe"
          if (-not (Test-Path $exePath)) { throw "Executable not found at $exePath" }
          $hashObj = Get-FileHash -Algorithm SHA256 -Path $exePath
          $sha256 = $hashObj.Hash.ToLower()
          Write-Host "SHA256: $sha256"
          $headers = @{ 'x-apikey' = "$Env:VT_API_KEY" }

          # Try to fetch existing report first
          try {
            $report = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/files/$sha256" -Headers $headers -ErrorAction Stop
          } catch { $report = $null }

          if (-not $report) {
            $fileSize = (Get-Item $exePath).Length
            if ($fileSize -gt 33554432) {
              Write-Host "File >32MB, requesting large file upload URL"
              $uploadUrlResp = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/files/upload_url" -Headers $headers
              $uploadUrl = $uploadUrlResp.data
              Write-Host "Uploading via large file URL"
              curl -s -X POST "$uploadUrl" -H "x-apikey: $Env:VT_API_KEY" -F "file=@$exePath" -o upload.json
            } else {
              Write-Host "Standard upload (<32MB)"
              curl -s -X POST "https://www.virustotal.com/api/v3/files" -H "x-apikey: $Env:VT_API_KEY" -F "file=@$exePath" -o upload.json
            }
            if (-not (Test-Path upload.json)) { throw "Upload response missing" }
            $upload = Get-Content upload.json | ConvertFrom-Json
            $analysisId = $upload.data.id
            Write-Host "Submitted for analysis: $analysisId"
            $maxAttempts = 18
            for ($i=0; $i -lt $maxAttempts; $i++) {
              Start-Sleep -Seconds 10
              $analysis = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/analyses/$analysisId" -Headers $headers
              $status = $analysis.data.attributes.status
              Write-Host "Analysis status: $status ($($i+1)/$maxAttempts)"
              if ($status -eq 'completed') { break }
            }
            # Retrieve final report after analysis
            try { $report = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/files/$sha256" -Headers $headers -ErrorAction Stop } catch { $report = $null }
          }

          if (-not $report) { throw "Unable to retrieve VirusTotal report." }
          $stats = $report.data.attributes.last_analysis_stats
          $summary = "VirusTotal scan: harmless=$($stats.harmless) undetected=$($stats.undetected) suspicious=$($stats.suspicious) malicious=$($stats.malicious) timeout=$($stats.timeout)"
          $permalink = "https://www.virustotal.com/gui/file/$sha256"
          Write-Host $summary
          Write-Host "Report URL: $permalink"
          # Build detailed flagged engines list & ratio
          $results = $report.data.attributes.last_analysis_results
          $allEngines = $results.PSObject.Properties.Name
          $flagged = @()
          foreach ($engineKey in $allEngines) {
            $entry = $results.$engineKey
            if ($entry.category -in 'malicious','suspicious') {
              $flagged += [PSCustomObject]@{engine=$entry.engine_name; category=$entry.category; result=$entry.result}
            }
          }
          $flaggedCount = $flagged.Count
          $totalEngines = $allEngines.Count
          $ratio = "$flaggedCount/$totalEngines"
          Write-Host "Detection ratio: $ratio"
          # Create markdown table
          $md = "# VirusTotal Report\n\nSHA256: $sha256\n\nSummary: $summary\n\nDetection ratio: $ratio\nReport URL: $permalink\n\n## Flagged Engines (malicious/suspicious)\n"
          if ($flaggedCount -gt 0) {
            $md += "| Engine | Category | Result |`n|---|---|---|`n"
            foreach ($f in $flagged) { $md += "| $($f.engine) | $($f.category) | $($f.result) |`n" }
          } else {
            $md += "None flagged.\n"
          }
          # Save artifacts
          $report | ConvertTo-Json -Depth 10 | Out-File vt_report.json -Encoding UTF8
          $md | Out-File vt_report.md -Encoding UTF8
          # Outputs
          "sha256=$sha256" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "summary=$summary" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "permalink=$permalink" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "ratio=$ratio" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          if ($flaggedCount -gt 0) { "flagged_engines=$([string]::Join(',', ($flagged.engine)))" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append }

      - name: Upload VirusTotal artifacts
        if: steps.vt_scan.outputs.sha256
        uses: actions/upload-artifact@v4
        with:
          name: virustotal-report
          path: |
            vt_report.json
            vt_report.md

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            Automated release for commit ${{ github.sha }}.
            This build includes the WoonnetRijnmondBot application.
            SHA256: ${{ steps.vt_scan.outputs.sha256 }}
            ${{ steps.vt_scan.outputs.summary }}
            Report: ${{ steps.vt_scan.outputs.permalink }}
            Detection Ratio: ${{ steps.vt_scan.outputs.ratio }}
            Flagged Engines: ${{ steps.vt_scan.outputs.flagged_engines }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/WoonnetRijnmondBot.exe
          asset_name: WoonnetRijnmondBot.exe
          asset_content_type: application/vnd.microsoft.portable-executable