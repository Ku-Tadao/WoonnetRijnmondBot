name: Build and Release Executable

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        shell: pwsh
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      - name: Download Chromedriver
        shell: pwsh
        run: |
          $LATEST_URL = "https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json"
          $Response = Invoke-RestMethod -Uri $LATEST_URL
          $ChromedriverUrl = $Response.channels.Stable.downloads.chromedriver | Where-Object { $_.platform -eq 'win64' } | Select-Object -ExpandProperty url
          Invoke-WebRequest -Uri $ChromedriverUrl -OutFile chromedriver.zip
          Expand-Archive -Path chromedriver.zip -DestinationPath .
          Move-Item -Path "chromedriver-win64/chromedriver.exe" -Destination "chromedriver.exe" -Force

      - name: Build executable
        shell: pwsh
        run: pyinstaller -F main.py -n WoonnetRijnmondBot --add-binary "chromedriver.exe;." --icon assets/icon.ico

      - name: Artifact metadata
        id: meta
        shell: pwsh
        run: |
          $exeCandidates = @(
            "dist/WoonnetRijnmondBot.exe",
            "dist/WoonnetRijnmondBot/WoonnetRijnmondBot.exe"
          )
            $exePath = $exeCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exePath) { Write-Host '::warning ::Executable not found for metadata.' } else {
            $sizeBytes = (Get-Item $exePath).Length
            $sizeMB = [Math]::Round($sizeBytes/1MB,2)
            Write-Host "Artifact: $exePath ($sizeMB MB)"
            "exe_path=$exePath" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            "exe_size_mb=$sizeMB" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          }

      - name: VirusTotal Scan
        id: vt_scan
        continue-on-error: true
        shell: pwsh
        env:
          VT_API_KEY: ${{ secrets.VIRUSTOTAL_API_KEY }}
        run: |
          if (-not $Env:VT_API_KEY) {
            Write-Host 'VirusTotal API key not provided; skipping scan.'
            'sha256=' | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            'summary=' | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            '{}' | Out-File vt_report.json -Encoding UTF8
            '# VirusTotal Summary`n`nScan skipped (no API key).' | Out-File vt_report.md -Encoding UTF8
            exit 0
          }
          # Determine executable path (support one-file and one-dir builds)
          $exeCandidates = @(
            "dist/WoonnetRijnmondBot.exe",
            "dist/WoonnetRijnmondBot/WoonnetRijnmondBot.exe"
          )
          $exePath = $exeCandidates | Where-Object { Test-Path $_ } | Select-Object -First 1
          if (-not $exePath) { throw "Executable not found. Looked in: $($exeCandidates -join ', ')" }
          $hashObj = Get-FileHash -Algorithm SHA256 -Path $exePath
          $sha256 = $hashObj.Hash.ToLower()
          Write-Host "SHA256: $sha256"
          $headers = @{ 'x-apikey' = "$Env:VT_API_KEY" }
          # Try to get existing report (avoid re-upload if already scanned)
          try { $report = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/files/$sha256" -Headers $headers -ErrorAction Stop; Write-Host 'Existing report found.' } catch { $report = $null }
          if (-not $report) {
            $fileSize = (Get-Item $exePath).Length
            $sizeMB = [Math]::Round($fileSize/1MB,2)
            Write-Host "Uploading file ($sizeMB MB) to VirusTotal..."
            try {
              if ($fileSize -le 33554432) { # <=32MB standard endpoint
                $uploadResp = Invoke-RestMethod -Method Post -Uri "https://www.virustotal.com/api/v3/files" -Headers $headers -Form @{ file = Get-Item $exePath } -ErrorAction Stop
              } else {
                Write-Host 'Requesting large file upload URL (file > 32MB).'
                $largeUrlResp = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/files/upload_url" -Headers $headers -ErrorAction Stop
                $uploadUrl = $largeUrlResp.data
                $uploadResp = Invoke-RestMethod -Method Post -Uri $uploadUrl -Headers $headers -Form @{ file = Get-Item $exePath } -ErrorAction Stop
              }
            } catch {
              Write-Host "::error ::VirusTotal upload failed: $($_.Exception.Message)"
              'sha256=' | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
              'summary=VirusTotal upload failed' | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
              '{"error":"upload_failed"}' | Out-File vt_report.json -Encoding UTF8
              '# VirusTotal Summary`n`nUpload failed.' | Out-File vt_report.md -Encoding UTF8
              exit 0
            }
            if (-not $uploadResp -or -not $uploadResp.data.id) {
              Write-Host '::error ::No analysis ID returned from upload.'
              'sha256=' | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
              'summary=VirusTotal upload returned no analysis ID' | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
              '{"error":"no_analysis_id"}' | Out-File vt_report.json -Encoding UTF8
              '# VirusTotal Summary`n`nNo analysis ID returned.' | Out-File vt_report.md -Encoding UTF8
              exit 0
            }
            $analysisId = $uploadResp.data.id
            Write-Host "Analysis ID: $analysisId"
            $maxAttempts = 24
            for ($i=0; $i -lt $maxAttempts; $i++) {
              Start-Sleep -Seconds 10
              try {
                $analysis = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/analyses/$analysisId" -Headers $headers -ErrorAction Stop
                $status = $analysis.data.attributes.status
                Write-Host ("Poll {0}/{1}: status={2}" -f ($i+1), $maxAttempts, $status)
                if ($status -eq 'completed') { break }
              } catch { Write-Host ("Polling error (continuing): {0}" -f $_.Exception.Message) }
            }
            try { $report = Invoke-RestMethod -Method Get -Uri "https://www.virustotal.com/api/v3/files/$sha256" -Headers $headers -ErrorAction Stop } catch { $report = $null }
          }
          if (-not $report) {
            Write-Host '::warning ::No report available after upload/poll.'
            "sha256=$sha256" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            "summary=VirusTotal scan unavailable" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
            '{"error":"no_report"}' | Out-File vt_report.json -Encoding UTF8
            "# VirusTotal Summary`n`nNo report available." | Out-File vt_report.md -Encoding UTF8
            exit 0
          }
          $stats = $report.data.attributes.last_analysis_stats
          $summary = "VirusTotal scan: harmless=$($stats.harmless) undetected=$($stats.undetected) suspicious=$($stats.suspicious) malicious=$($stats.malicious) timeout=$($stats.timeout)"
          "sha256=$sha256" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "summary=$summary" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "vt_harmless=$($stats.harmless)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "vt_undetected=$($stats.undetected)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "vt_suspicious=$($stats.suspicious)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "vt_malicious=$($stats.malicious)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          "vt_timeout=$($stats.timeout)" | Out-File -FilePath $Env:GITHUB_OUTPUT -Append
          $report | ConvertTo-Json -Depth 8 | Out-File vt_report.json -Encoding UTF8
          "# VirusTotal Summary`n`n$summary" | Out-File vt_report.md -Encoding UTF8

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          body: |
            ## WoonnetRijnmondBot Release v${{ github.run_number }}

            Commit: `${{ github.sha }}`  
            Branch: `${{ github.ref_name }}`  
            Triggered by: `${{ github.actor }}`  

            ### Artifact
            Path: `${{ steps.meta.outputs.exe_path }}`  
            Size: `${{ steps.meta.outputs.exe_size_mb }}` MB  
            SHA256: `${{ steps.vt_scan.outputs.sha256 }}`

            ### VirusTotal Summary
            ${{ steps.vt_scan.outputs.summary }}

            | Harmless | Undetected | Suspicious | Malicious | Timeout |
            |----------|------------|------------|-----------|---------|
            | ${{ steps.vt_scan.outputs.vt_harmless || '—' }} | ${{ steps.vt_scan.outputs.vt_undetected || '—' }} | ${{ steps.vt_scan.outputs.vt_suspicious || '—' }} | ${{ steps.vt_scan.outputs.vt_malicious || '—' }} | ${{ steps.vt_scan.outputs.vt_timeout || '—' }} |

            Notes:
            - If the table shows em-dashes, the VirusTotal scan was skipped or unavailable.
            - Large files (>32MB) use the large upload endpoint; polling may take several minutes.

            ### Usage
            1. Download `WoonnetRijnmondBot.exe` (or the zip) from the Assets section.
            2. Place your configuration (if required) alongside the executable.
            3. Run the executable. The PySide6 UI will launch.

            ### Changes
            - Automated build process executed successfully.
            - See commit diff for exact source changes included in this build.

            ### Integrity
            You can verify integrity with:
            ```powershell
            Get-FileHash -Algorithm SHA256 .\WoonnetRijnmondBot.exe
            ```

            ---
            _Generated automatically by GitHub Actions._
          draft: false
          prerelease: false

      - name: Upload Release Asset (exe)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/WoonnetRijnmondBot.exe
          asset_name: WoonnetRijnmondBot.exe
          asset_content_type: application/octet-stream

      - name: Upload VirusTotal artifacts
        uses: actions/upload-artifact@v4
        with:
          name: virustotal-report
          path: |
            vt_report.json
            vt_report.md

      - name: Archive dist folder
        shell: pwsh
        run: |
          $oneDir = 'dist/WoonnetRijnmondBot'
          $oneFile = 'dist/WoonnetRijnmondBot.exe'
          if (Test-Path $oneDir) {
            Write-Host 'Archiving one-dir distribution.'
            if (Test-Path WoonnetRijnmondBot.zip) { Remove-Item WoonnetRijnmondBot.zip -Force }
            Compress-Archive -Path $oneDir -DestinationPath WoonnetRijnmondBot.zip
          } elseif (Test-Path $oneFile) {
            Write-Host 'Archiving single executable.'
            if (Test-Path WoonnetRijnmondBot.zip) { Remove-Item WoonnetRijnmondBot.zip -Force }
            Compress-Archive -Path $oneFile -DestinationPath WoonnetRijnmondBot.zip
          } else {
            Write-Host '::error ::No build artifacts found to archive.'
            Get-ChildItem -Recurse dist | Format-List || Write-Host 'dist directory listing failed.'
            exit 1
          }

      - name: Upload Release Asset (zip)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./WoonnetRijnmondBot.zip
          asset_name: WoonnetRijnmondBot.zip
          asset_content_type: application/zip